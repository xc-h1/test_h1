name: Zip Bomb Upload Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unzip-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Python (should be pre-installed in most runners)
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Use Python to process 10 files per cycle
      - name: Unzip and commit 10 files at a time with Python
        shell: bash
        run: |
          python - <<'EOF'
          import zipfile
          import os
          import time
          import subprocess

          # Define the path to the ZIP file and extraction directory
          zip_path = 'zbbig2.zip'
          extraction_dir = 'extracted_files'

          # Create the extraction directory if it doesn't exist
          if not os.path.exists(extraction_dir):
              os.makedirs(extraction_dir)

          # Open the ZIP file
          with zipfile.ZipFile(zip_path, 'r') as zip_ref:
              all_files = zip_ref.namelist()
              batch_size = 10
              file_batch = []

              # Process 10 files at a time
              for index, file in enumerate(all_files):
                  if file.startswith('assets/'):
                      print(f"Preparing {file} for extraction...")
                      file_batch.append(file)

                      # When we reach a batch size of 10, extract and commit them
                      if len(file_batch) == batch_size or index == len(all_files) - 1:
                          print(f"Processing batch of {len(file_batch)} files: {file_batch}")

                          # Extract each file in the batch
                          for f in file_batch:
                              try:
                                  zip_ref.extract(f, extraction_dir)
                                  print(f"Extracted {f}")
                              except Exception as e:
                                  print(f"Failed to extract {f}: {str(e)}")

                          # Commit and push each file
                          for extracted_file in file_batch:
                              extracted_file_path = os.path.join(extraction_dir, extracted_file)
                              if os.path.exists(extracted_file_path):
                                  # Set up Git config
                                  subprocess.run(['git', 'config', '--global', 'user.name', 'github-actions[bot]'])
                                  subprocess.run(['git', 'config', '--global', 'user.email', 'github-actions[bot]@users.noreply.github.com'])

                                  # Add and commit the file
                                  subprocess.run(['git', 'add', extracted_file_path])
                                  subprocess.run(['git', 'commit', '-m', f'Add extracted file: {extracted_file}'])
                                  subprocess.run(['git', 'push'])

                                  # Remove the file after pushing
                                  os.remove(extracted_file_path)
                                  print(f"Deleted {extracted_file_path}")
                              else:
                                  print(f"{extracted_file_path} not found after extraction.")
                          
                          # Clear the batch and wait before the next cycle
                          file_batch.clear()
                          time.sleep(1)

          EOF

      # Step 4: Clean up
      - name: Clean up
        run: |
          rm -rf extracted_files
